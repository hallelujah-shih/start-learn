user nobody nobody;
worker_processes auto;
error_log /var/log/nginx/error.log error;
pid /run/nginx.pid;

# 若不設置為操作系統的nofile限制，這裡設置可以突破操作系統限制
worker_rlimit_nofile 65535;

events 
{
    use epoll;
    # nginx在已經得到一個新連接的通知時，接收盡可能更多的連接(讓worker進程一次性地接受監聽隊列裡的所有請求，然後處理，若為off，worker進程必須一個一個地接受監聽隊列裡的請求，默認為關閉，可能會造成worker進程一次接受的請求大於worker_connections指定的可以接受的請求數，這就是overflow，overflow部分不會受到處理，造成性能損失)
    multi_accept on;
    # 設置可由一個worker進程同時打開的最大連接數(最大客戶數也由系統的可用socket連接數限制~64k)
    worker_connections 65535;
}

http
{
    # 關閉錯誤頁面中的服務器版本數字
    server_tokens off;
    include mime.types;
    default_type application/octet-stream;
    charset utf-8;
    
    # man 2 sendfile,在文件句柄間傳輸數據(文件和socket)
    sendfile on;
    # Direct I/O
    directio 4m;
    # 異步IO Linux上需要先開啟directio後才能啟用aio,nginx若沒有--with-file-aio也不能使用此指令
    aio on;
    # 上面三條指令綜合起來實現不同目標。如果文件大小小於directio指定的大小，使用sendfile功能，以異步方式讀取directio服務的文件

    tcp_nopush on;
    tcp_nodelay on;

    # 給客戶端分配keep-alive連接超時時間，服務器將在這個超時時間過後關閉連接
    keepalive_timeout 60;
    client_body_buffer_size 512k;
    
    # 設置和後端服務器建立連接的超時，這個超時一般不可能大於75秒
    proxy_connect_timeout 5;
    # 从后端服务器读取响应的超时时间。指相邻两次读操作之间的最长时间间隔，而不是整个响应传输完成的最长时间。如果后端服务器在超时时间段内没有传输任何数据，连接将关闭
    proxy_read_timeout 60;
    # 向后端服务器传输请求的超时。指两次相邻写操作之间的最长时间间隔，而不是整个请求传输完成的最长时间。如果后端服务器在超时时间段内没有接收任何数据，连接将会被关闭
    proxy_send_timeout 60;
    # 设置缓冲区大小为8k,nginx从被代理的服务器读取响应时，使用该缓冲区保存响应的开始部分，这部分通常包含着响应头
    proxy_buffer_size 8k;
    为每个连接设置缓冲区的数量为4，每块缓冲区的大小为8k。这些缓冲区用于保存从被代理的服务器读取的响应
    proxy_buffers 4 8k;
    # 当开启缓冲响应功能后，在没有读到全部响应的情况下，写缓冲到达一定大小时，nginx一定会向客户端发送响应，直到缓冲小于此值。
    proxy_busy_buffers_size 16k;
    # nginx每次写数据到临时文件的大小
    proxy_temp_file_write_size 16k;
    # 定义从后端服务器接受的临时文件存放路径，可以为临时文件路径定义至多3层子目录的目录树
    # proxy_temp_path /data/proxy_temp_dir 1 2; 实际得到的临时文件路径看起来为/data/proxy_temp_dir/7/45/12341234123;
    proxy_temp_path /data/proxy_temp_dir;
    # 设置缓存路径相关参数
    proxy_cache_path /data/proxy_cache_dir levels=1:2 keys_zone=cache_one:1g inactive=1d max_size=30g;
    
    gzip on;
    gzip_min_length 1k;
    gzip_buffers 4 16k;
    gzip_http_version 1.1;
    gzip_comp_level 2;
    gzip_types text/plain application/x-javascript text/css application/xml;
    gzip_vary on;

    upstream backend 
    {
        server 192.168.1.3:80 weight=1 max_fails=2 fail_timeout=30s;
        server 192.168.1.4:80 weight=1 max_fails=2 fail_timeout=30s;
        server 192.168.1.5:80 weight=1 max_fails=2 fail_timeout=30s;
    }

    server 
    {
        listen 80;
        server_name test.start-learn.win;
        index index.html index.htm;
        root /data/www/test.start-learn.win;
        location /
        {
            # 指定在何种情况下一个失败的请求会被发送到下一台后端服务器 
            #error 和后端服务器建立连接时，或向后端服务器发送请求时，或从后端服务器接受响应头时出现错误
            # invalid_header 后端服务器返回空响应或者非法响应头
            proxy_next_upstream http_502 http_504 error timeout invalid_header;
            proxy_cache cache_one;
            proxy_cache_valid 200 304 12h;
            proxy_cache_key $host$uri$is_args$args;
            # 设置不从缓存取的条件
            proxy_cache_bypass $http_pragma $http_authorization;
            proxy_cache_bypass $cookie_nocache $arg_nocache$arg_comment;
            # 设置nginx不将响应写入缓存的条件
            proxy_no_cache $cookie_nocache $arg_nocache$arg_comment;
            proxy_no_cache $http_pragma $http_authorization;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_pass http://backend;
            expires 1d;
        }

        location ~ .*\.(php|jsp|cgi)?$
        {
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_pass http://backend;
        }

    }
}
